name: Publish Artifacts

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: false
        default: 'latest'

jobs:
  publish:
    name: Build and Publish Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Node dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run linters
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Build all packages and apps
        run: npm run build
        env:
          NODE_ENV: production

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Package Web App
        run: |
          cd apps/web
          tar -czf ../../artifacts/web-app.tar.gz .next/ package.json public/
          echo "✅ Web app packaged"

      - name: Package API Service
        run: |
          cd apps/api
          tar -czf ../../artifacts/api-service.tar.gz dist/ package.json
          echo "✅ API service packaged"

      - name: Package Data Pipeline
        run: |
          cd apps/data-pipeline
          tar -czf ../../artifacts/data-pipeline.tar.gz src/ pyproject.toml setup.py
          echo "✅ Data pipeline packaged"

      - name: Package Shared Libraries
        run: |
          cd packages
          tar -czf ../artifacts/shared-packages.tar.gz \
            shared/dist/ \
            ui/dist/ \
            python-shared/src/ \
            --exclude='node_modules' \
            --exclude='*.pyc' \
            --exclude='__pycache__'
          echo "✅ Shared packages packaged"

      - name: Generate checksums
        run: |
          cd artifacts
          sha256sum *.tar.gz > checksums.txt
          cat checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ github.run_id }}
          path: artifacts/
          retention-days: 90

      - name: Attach artifacts to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          token: ${{ secrets.GITHUB_TOKEN }}

  docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: publish
    if: github.event_name == 'release' || github.event_name == 'push'

    strategy:
      matrix:
        service: [web, api, data-pipeline]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="latest"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile.${{ matrix.service }}
          push: false
          tags: |
            monorepo-${{ matrix.service }}:${{ steps.version.outputs.version }}
            monorepo-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image
        run: |
          docker save monorepo-${{ matrix.service }}:${{ steps.version.outputs.version }} | gzip > ${{ matrix.service }}-image.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-${{ matrix.service }}-${{ github.run_id }}
          path: ${{ matrix.service }}-image.tar.gz
          retention-days: 30
